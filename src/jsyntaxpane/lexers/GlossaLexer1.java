/* The following code was generated by JFlex 1.4.3 on 6/17/10 1:12 PM */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/17/10 1:12 PM from the specification file
 * <tt>glossa.flex</tt>
 */
public final class GlossaLexer1 extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\3\1\2\1\0\1\3\1\1\16\12\4\0\1\3\1\10"+
    "\2\0\1\11\1\0\1\62\1\4\1\56\1\57\1\62\1\62\1\62"+
    "\1\54\1\15\1\62\1\13\11\14\1\62\1\0\1\53\1\64\1\63"+
    "\2\0\3\11\1\65\4\11\1\66\3\11\1\70\1\11\1\71\6\11"+
    "\1\67\4\11\1\60\1\16\1\61\1\62\1\32\1\0\3\11\1\65"+
    "\4\11\1\66\3\11\1\70\1\11\1\71\6\11\1\67\4\11\4\0"+
    "\41\12\2\0\4\11\4\0\1\11\2\0\1\12\7\0\1\11\4\0"+
    "\1\11\5\0\27\11\1\0\37\11\1\0\u013f\11\31\0\162\11\4\0"+
    "\14\11\16\0\5\11\11\0\1\11\21\0\130\12\5\0\23\12\12\0"+
    "\1\11\13\0\1\50\1\0\1\47\1\46\1\52\1\0\1\45\1\0"+
    "\1\11\1\51\1\11\1\23\1\34\1\22\1\41\1\30\1\11\1\26"+
    "\1\33\1\36\1\44\1\31\1\24\1\35\1\40\1\21\1\17\1\20"+
    "\1\0\1\7\1\27\1\43\1\11\1\25\1\42\1\37\2\11\1\50"+
    "\1\47\1\46\1\52\1\11\1\23\1\34\1\22\1\41\1\30\1\11"+
    "\1\26\1\33\1\36\1\44\1\31\1\24\1\35\1\40\1\21\1\17"+
    "\1\20\1\5\1\6\1\27\1\43\1\11\1\25\1\42\1\37\2\11"+
    "\1\45\1\11\1\51\1\0\46\11\1\0\5\11\4\0\202\11\1\0"+
    "\4\12\3\0\105\11\1\0\46\11\2\0\2\11\6\0\20\11\41\0"+
    "\46\11\2\0\1\11\7\0\47\11\11\0\21\12\1\0\27\12\1\0"+
    "\3\12\1\0\1\12\1\0\2\12\1\0\1\12\13\0\33\11\5\0"+
    "\3\11\15\0\4\12\14\0\6\12\13\0\32\11\5\0\13\11\16\12"+
    "\7\0\12\12\4\0\2\11\1\12\143\11\1\0\1\11\10\12\1\0"+
    "\6\12\2\11\2\12\1\0\4\12\2\11\12\12\3\11\2\0\1\11"+
    "\17\0\1\12\1\11\1\12\36\11\33\12\2\0\3\11\60\0\46\11"+
    "\13\12\1\11\u014f\0\3\12\66\11\2\0\1\12\1\11\20\12\2\0"+
    "\1\11\4\12\3\0\12\11\2\12\2\0\12\12\21\0\3\12\1\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0"+
    "\4\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\11\0"+
    "\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11\15\0"+
    "\3\12\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\2\0\1\12\1\0\5\12\4\0"+
    "\2\12\2\0\3\12\13\0\4\11\1\0\1\11\7\0\14\12\3\11"+
    "\14\0\3\12\1\0\11\11\1\0\3\11\1\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\5\11\2\0\1\12\1\11\10\12\1\0\3\12"+
    "\1\0\3\12\2\0\1\11\17\0\2\11\2\12\2\0\12\12\1\0"+
    "\1\11\17\0\3\12\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\1\12\1\11\6\12\3\0"+
    "\2\12\2\0\3\12\10\0\2\12\4\0\2\11\1\0\3\11\4\0"+
    "\12\12\1\0\1\11\20\0\1\12\1\11\1\0\6\11\3\0\3\11"+
    "\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11"+
    "\3\0\3\11\3\0\10\11\1\0\3\11\4\0\5\12\3\0\3\12"+
    "\1\0\4\12\11\0\1\12\17\0\11\12\11\0\1\11\7\0\3\12"+
    "\1\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11"+
    "\4\0\7\12\1\0\3\12\1\0\4\12\7\0\2\12\11\0\2\11"+
    "\4\0\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0\27\11"+
    "\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0\3\12"+
    "\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\4\0\12\12"+
    "\22\0\2\12\1\0\10\11\1\0\3\11\1\0\27\11\1\0\20\11"+
    "\4\0\6\12\2\0\3\12\1\0\4\12\11\0\1\12\10\0\2\11"+
    "\4\0\12\12\22\0\2\12\1\0\22\11\3\0\30\11\1\0\11\11"+
    "\1\0\1\11\2\0\7\11\3\0\1\12\4\0\6\12\1\0\1\12"+
    "\1\0\10\12\22\0\2\12\15\0\60\11\1\12\2\11\7\12\4\0"+
    "\10\11\10\12\1\0\12\12\47\0\2\11\1\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\12\2\11"+
    "\6\12\1\0\2\12\1\11\2\0\5\11\1\0\1\11\1\0\6\12"+
    "\2\0\12\12\2\0\2\11\42\0\1\11\27\0\2\12\6\0\12\12"+
    "\13\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12\10\11\1\0"+
    "\42\11\6\0\24\12\1\0\2\12\4\11\4\0\10\12\1\0\44\12"+
    "\11\0\1\12\71\0\42\11\1\0\5\11\1\0\2\11\1\0\7\12"+
    "\3\0\4\12\6\0\12\12\6\0\6\11\4\12\106\0\46\11\12\0"+
    "\51\11\7\0\132\11\5\0\104\11\5\0\122\11\6\0\7\11\1\0"+
    "\77\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\47\11\1\0\1\11\1\0\4\11\2\0\37\11\1\0"+
    "\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0"+
    "\7\11\1\0\7\11\1\0\27\11\1\0\37\11\1\0\1\11\1\0"+
    "\4\11\2\0\7\11\1\0\47\11\1\0\23\11\16\0\11\12\56\0"+
    "\125\11\14\0\u026c\11\2\0\10\11\12\0\32\11\5\0\113\11\3\0"+
    "\3\11\17\0\15\11\1\0\4\11\3\12\13\0\22\11\3\12\13\0"+
    "\22\11\2\12\14\0\15\11\1\0\3\11\1\0\2\12\14\0\64\11"+
    "\40\12\3\0\1\11\3\0\2\11\1\12\2\0\12\12\41\0\3\12"+
    "\2\0\12\12\6\0\130\11\10\0\51\11\1\12\126\0\35\11\3\0"+
    "\14\12\4\0\14\12\12\0\12\12\36\11\2\0\5\11\u038b\0\154\11"+
    "\224\0\234\11\4\0\132\11\6\0\26\11\2\0\6\11\2\0\46\11"+
    "\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0\3\11"+
    "\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0\3\11"+
    "\1\0\7\11\17\0\4\12\32\0\5\12\20\0\2\11\23\0\1\11"+
    "\13\0\4\12\6\0\6\12\1\0\1\11\15\0\1\11\40\0\22\11"+
    "\36\0\15\12\4\0\1\12\3\0\6\12\27\0\1\11\4\0\1\11"+
    "\2\0\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\4\11\1\0\3\11\1\0\7\11\3\0\3\11"+
    "\5\0\5\11\26\0\44\11\14\0\1\55\u0e74\0\3\11\31\0\11\11"+
    "\6\12\1\0\5\11\2\0\5\11\4\0\126\11\2\0\2\12\2\0"+
    "\3\11\1\0\137\11\5\0\50\11\4\0\136\11\21\0\30\11\70\0"+
    "\20\11\u0200\0\u19b6\11\112\0\u51a6\11\132\0\u048d\11\u0773\0\u2ba4\11\u215c\0"+
    "\u012e\11\2\0\73\11\225\0\7\11\14\0\5\11\5\0\1\11\1\12"+
    "\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0\66\11\50\0"+
    "\15\11\3\0\20\12\20\0\4\12\17\0\2\11\30\0\3\11\31\0"+
    "\1\11\6\0\5\11\1\0\207\11\2\0\1\12\4\0\1\11\13\0"+
    "\12\12\7\0\32\11\4\0\1\11\1\0\32\11\12\0\132\11\3\0"+
    "\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0\2\11\3\0"+
    "\2\11\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\1\2\2\3\1\4\2\5\1\6\15\3"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\6\2\3"+
    "\1\14\2\15\1\16\1\1\2\3\2\4\1\0\1\5"+
    "\11\3\1\7\1\3\1\7\16\3\1\17\35\3\2\7"+
    "\31\3\1\7\1\3\1\7\16\3\1\7\10\3\1\20"+
    "\121\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\164\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\164\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0122\0\u0536\0\164\0\164\0\164\0\164\0\164"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\164\0\164\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\164\0\u01d0\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u0122"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\164\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u0122\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440"+
    "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80"+
    "\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50"+
    "\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20"+
    "\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0"+
    "\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\2\10\1\11"+
    "\1\7\1\3\1\12\1\13\1\14\1\3\1\15\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\2\7\1\26\4\7\1\27\1\30\1\7\1\31"+
    "\1\16\1\32\4\7\1\33\1\14\1\34\1\35\1\36"+
    "\1\37\1\40\1\14\1\41\1\14\1\42\2\7\1\43"+
    "\1\7\1\44\1\45\1\46\1\44\1\47\11\44\1\50"+
    "\53\44\74\0\1\3\72\0\1\5\73\0\3\7\1\0"+
    "\4\7\2\0\34\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\10\7\1\51\13\7\1\52\7\7\12\0"+
    "\5\7\1\11\1\53\1\54\67\11\13\0\2\55\1\56"+
    "\67\0\2\13\1\56\61\0\3\7\1\0\4\7\2\0"+
    "\1\7\1\57\7\7\1\60\22\7\12\0\5\7\5\0"+
    "\1\7\2\61\1\0\4\7\2\0\6\7\1\62\25\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\1\7"+
    "\1\63\15\7\1\64\14\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\65\1\66\10\7\1\67\3\7"+
    "\1\70\6\7\1\71\6\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\11\7\1\72\16\7\1\73\3\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\4\7"+
    "\1\74\27\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\2\7\1\75\6\7\1\76\14\7\1\75\1\7"+
    "\1\77\3\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\1\100\33\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\2\7\1\101\31\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\7\7\1\102\17\7\1\102"+
    "\4\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\17\7\1\103\14\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\11\7\1\104\22\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\4\7\1\105\24\7\1\106"+
    "\2\7\12\0\5\7\54\0\1\34\6\0\2\14\71\0"+
    "\1\14\12\0\3\7\1\0\4\7\2\0\34\7\12\0"+
    "\1\7\1\107\3\7\5\0\3\7\1\0\4\7\2\0"+
    "\34\7\12\0\4\7\1\110\1\44\2\0\1\44\1\0"+
    "\11\44\1\0\53\44\2\0\1\46\67\0\2\111\1\0"+
    "\67\111\5\0\3\7\1\0\4\7\2\0\4\7\1\112"+
    "\27\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\16\7\1\113\15\7\12\0\5\7\2\0\1\54\102\0"+
    "\2\56\62\0\3\7\1\0\4\7\2\0\2\7\1\114"+
    "\1\7\1\115\21\7\1\114\5\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\1\7\1\116\32\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\2\7\1\70"+
    "\31\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\17\7\1\32\14\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\4\7\1\117\24\7\1\117\2\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\70"+
    "\27\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\2\7\1\70\23\7\1\70\5\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\6\7\1\120\25\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\7\7\1\121"+
    "\2\7\1\122\21\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\11\7\1\123\16\7\1\123\3\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\6\7\1\124"+
    "\1\7\1\125\23\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\6\7\1\126\25\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\1\7\1\127\32\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\10\7\1\130"+
    "\23\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\12\7\1\131\21\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\12\7\1\132\21\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\4\7\1\133\12\7\1\134"+
    "\13\7\1\134\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\3\7\1\135\30\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\5\7\1\64\26\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\4\7\1\136\24\7"+
    "\1\137\2\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\24\7\1\140\7\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\12\7\1\141\4\7\1\32\14\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\12\7"+
    "\1\141\21\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\34\7\12\0\2\7\1\32\2\7\5\0\3\7"+
    "\1\0\4\7\2\0\34\7\12\0\1\32\4\7\5\0"+
    "\3\7\1\0\4\7\2\0\14\7\1\142\17\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\143"+
    "\24\7\1\143\2\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\3\7\1\144\30\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\3\7\1\145\30\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\17\7\1\146"+
    "\13\7\1\146\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\23\7\1\130\10\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\7\7\1\147\17\7\1\150\4\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\14\7"+
    "\1\151\17\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\17\7\1\152\14\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\7\1\153\32\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\1\7\1\154\32\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\4\7"+
    "\1\155\27\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\1\7\1\156\32\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\4\7\1\157\27\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\11\7\1\70\22\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\2\7"+
    "\1\160\31\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\2\7\1\161\31\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\16\7\1\162\15\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\12\7\1\163\21\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\17\7"+
    "\1\164\14\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\15\7\1\165\4\7\1\166\11\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\15\7\1\165\16\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\22\7"+
    "\1\151\11\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\11\7\1\167\22\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\11\7\1\170\22\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\1\7\1\171\32\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\1\7"+
    "\1\172\32\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\5\7\1\173\26\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\174\33\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\13\7\1\175\20\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\13\7\1\176"+
    "\20\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\7\7\1\177\17\7\1\177\4\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\20\7\1\200\11\7\1\200"+
    "\1\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\4\7\1\201\27\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\17\7\1\202\14\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\15\7\1\203\16\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\17\7\1\204"+
    "\14\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\25\7\1\205\6\7\12\0\5\7\5\0\1\206\1\7"+
    "\1\206\1\0\4\7\2\0\34\7\12\0\5\7\5\0"+
    "\1\207\1\7\1\207\1\0\4\7\2\0\34\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\210"+
    "\24\7\1\210\2\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\11\7\1\211\22\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\25\7\1\212\6\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\167"+
    "\27\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\17\7\1\213\14\7\12\0\5\7\5\0\1\7\2\130"+
    "\1\0\4\7\2\0\34\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\7\1\214\32\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\10\7\1\215\23\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\4\7"+
    "\1\216\27\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\4\7\1\217\27\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\10\7\1\220\23\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\11\7\1\221\22\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\11\7"+
    "\1\222\22\7\12\0\5\7\5\0\1\70\1\7\1\70"+
    "\1\0\4\7\2\0\34\7\12\0\5\7\5\0\1\223"+
    "\1\7\1\223\1\0\4\7\2\0\34\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\17\7\1\224\14\7"+
    "\12\0\5\7\5\0\1\225\1\7\1\225\1\0\4\7"+
    "\2\0\34\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\12\7\1\226\21\7\12\0\5\7\5\0\1\227"+
    "\1\7\1\227\1\0\4\7\2\0\34\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\10\7\1\230\23\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\13\7"+
    "\1\231\20\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\13\7\1\232\20\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\12\7\1\233\21\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\21\7\1\130\12\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\7\7"+
    "\1\234\1\7\1\235\15\7\1\234\1\235\3\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\25\7\1\236"+
    "\6\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\11\7\1\177\16\7\1\177\3\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\7\7\1\237\24\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\5\7\1\102"+
    "\26\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\10\7\1\135\23\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\20\7\1\237\13\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\1\240\33\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\1\241\33\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\13\7\1\242"+
    "\20\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\4\7\1\234\4\7\1\235\22\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\13\7\1\243\20\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\7\7\1\244"+
    "\24\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\13\7\1\245\20\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\7\7\1\246\17\7\1\246\4\7\12\0"+
    "\5\7\5\0\1\7\2\247\1\0\4\7\2\0\1\250"+
    "\3\7\1\251\4\7\1\252\10\7\1\253\11\7\12\0"+
    "\5\7\5\0\1\7\2\254\1\0\4\7\2\0\1\255"+
    "\3\7\1\251\4\7\1\256\10\7\1\257\11\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\260"+
    "\27\7\12\0\5\7\5\0\1\234\1\7\1\234\1\0"+
    "\4\7\2\0\34\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\4\7\1\261\27\7\12\0\5\7\5\0"+
    "\1\7\2\262\1\0\4\7\2\0\34\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\4\7\1\263\27\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\4\7"+
    "\1\264\27\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\4\7\1\251\27\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\2\7\1\265\31\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\10\7\1\214\23\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\26\7"+
    "\1\265\5\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\1\7\1\266\32\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\24\7\1\267\7\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\1\7\1\270\32\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\16\7"+
    "\1\70\15\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\1\271\33\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\17\7\1\272\14\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\24\7\1\273\7\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\1\7\1\274"+
    "\32\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\1\275\33\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\17\7\1\276\14\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\15\7\1\130\16\7\12\0\5\7"+
    "\5\0\1\7\2\277\1\0\4\7\2\0\34\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\7\7\1\70"+
    "\24\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\16\7\1\300\15\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\16\7\1\301\15\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\10\7\1\302\23\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\235"+
    "\4\7\1\235\22\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\16\7\1\303\15\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\2\7\1\304\31\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\263"+
    "\12\7\1\305\14\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\4\7\1\306\27\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\16\7\1\307\15\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\2\7\1\310"+
    "\31\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\4\7\1\264\12\7\1\311\14\7\12\0\5\7\5\0"+
    "\3\7\1\0\4\7\2\0\4\7\1\312\27\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\17\7\1\64"+
    "\13\7\1\64\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\4\7\1\313\27\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\31\7\1\313\2\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\2\7\1\314\31\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\4\7"+
    "\1\315\27\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\3\7\1\316\30\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\12\7\1\317\21\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\22\7\1\320\11\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\31\7"+
    "\1\315\2\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\3\7\1\321\30\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\12\7\1\322\21\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\22\7\1\323\11\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\12\7"+
    "\1\324\21\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\24\7\1\70\7\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\7\1\325\32\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\1\7\1\326\32\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\2\7"+
    "\1\327\31\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\17\7\1\330\14\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\1\7\1\331\32\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\2\7\1\332\31\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\17\7"+
    "\1\333\14\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\7\7\1\334\24\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\10\7\1\335\23\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\4\7\1\336\27\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\3\7"+
    "\1\337\30\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\25\7\1\340\6\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\31\7\1\336\2\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\3\7\1\341\30\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\25\7"+
    "\1\342\6\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\23\7\1\343\10\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\7\7\1\344\24\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\5\7\1\345\26\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\20\7"+
    "\1\251\13\7\12\0\5\7\5\0\3\7\1\0\4\7"+
    "\2\0\4\7\1\346\27\7\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\32\7\1\251\1\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\4\7\1\347\27\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\7\7"+
    "\1\177\24\7\12\0\5\7\5\0\1\7\2\343\1\0"+
    "\4\7\2\0\34\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\5\7\1\350\26\7\12\0\5\7\5\0"+
    "\1\7\2\351\1\0\4\7\2\0\34\7\12\0\5\7"+
    "\5\0\1\7\2\352\1\0\4\7\2\0\34\7\12\0"+
    "\5\7\5\0\3\7\1\0\4\7\2\0\4\7\1\353"+
    "\27\7\12\0\5\7\5\0\3\7\1\0\4\7\2\0"+
    "\17\7\1\354\14\7\12\0\5\7\5\0\3\7\1\0"+
    "\4\7\2\0\33\7\1\354\12\0\5\7\5\0\3\7"+
    "\1\0\4\7\2\0\10\7\1\355\23\7\12\0\5\7"+
    "\5\0\3\7\1\0\4\7\2\0\4\7\1\177\27\7"+
    "\12\0\5\7\5\0\3\7\1\0\4\7\2\0\2\7"+
    "\1\177\31\7\12\0\5\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\5\1\1\11\17\1\5\11"+
    "\5\1\2\11\4\1\1\11\1\0\33\1\1\11\244\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public GlossaLexer1() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GlossaLexer1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GlossaLexer1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1868) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return new Token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 17: break;
        case 7: 
          { return token(TokenType.KEYWORD);
          }
        case 18: break;
        case 2: 
          { yybegin(CHARLITERAL); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 19: break;
        case 10: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 20: break;
        case 6: 
          { return token(TokenType.OPERATOR);
          }
        case 21: break;
        case 9: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 22: break;
        case 15: 
          { tokenLength += 2;
          }
        case 23: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 24: break;
        case 8: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 25: break;
        case 4: 
          { return token(TokenType.COMMENT);
          }
        case 26: break;
        case 11: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 27: break;
        case 16: 
          { return token(TokenType.TYPE);
          }
        case 28: break;
        case 13: 
          { yybegin(YYINITIAL);
          }
        case 29: break;
        case 5: 
          { return token(TokenType.NUMBER);
          }
        case 30: break;
        case 12: 
          { tokenLength += yylength();
          }
        case 31: break;
        case 1: 
          { 
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
